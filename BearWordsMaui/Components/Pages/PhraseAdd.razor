@page "/phrase/add"
@using BearWordsAPI.Shared.Data.Models
@inherits BasePageComponent
@inject PhraseService PhraseService
@inject LanguageService LanguageService
@inject TagService TagService
@inject ITempStorageService TempStorage

<h2 class="mb-4">Add Phrase</h2>

<ErrorAlert Message="@errorMessage" />

<div class="card">
    <div class="card-body">
        <div class="mb-2">
            <label for="phrase-text" class="form-label">Phrase Text</label>
            <input type="text" class="form-control" id="phrase-text" @bind="phraseText" @bind:event="oninput">
        </div>
        <div class="mb-2">
            <label for="phrase-language" class="form-label">Language</label>
            <select class="form-select" id="phrase-language" @bind="selectedLanguage">
                @if (languages is not null)
                {
                    @foreach (var language in languages)
                    {
                        <option value="@language.LanguageCode">@language.LanguageName (@language.LanguageCode)</option>
                    }
                }
            </select>
        </div>
        <div class="mb-3">
            <label for="phrase-details" class="form-label">Details</label>
            <textarea class="form-control" id="phrase-details" rows="6" 
                @bind="phraseNote" @bind:event="oninput"></textarea>
        </div>
        <div class="mb-4">
            <SelectTags TagHintKeyword="@phraseText"
                        TagCategories="@tagCategories"
                        SelectedTags="@selectedTags"
                        OnNavigate="SetTempStorage" />
        </div>
        <div class="d-flex gap-2">
            <button type="submit" class="btn btn-primary" disabled="@isSaving" @onclick="SavePhrase">
                <i class="bi bi-save"></i> Save
            </button>
            <button type="button" class="btn btn-secondary" @onclick="NavigateToPrevious">
                <i class="bi bi-x-circle"></i> Discard
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Text { get; set; }

    private Language[]? languages;
    private TagCategory[] tagCategories = [];
    private List<Tag> selectedTags = [];
    private string phraseText = string.Empty;
    private string selectedLanguage = string.Empty;
    private string? phraseNote;
    private string errorMessage = string.Empty;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadLanguages();

        if (!string.IsNullOrEmpty(Text))
        {
            phraseText = Uri.UnescapeDataString(Text);
        }

        var data = TempStorage.Pop<PhraseData>("phrase_add");
        if (data is not null)
        {
            phraseText = data.PhraseText!;
            phraseNote = data.PhraseNote;
            selectedLanguage = data.SelectedLanguage!;
            selectedTags = data.SelectedTags!;
        }
    }

    private async Task LoadLanguages()
    {
        try
        {
            languages = await LanguageService.GetLanguagesAsync();
            tagCategories = await TagService.GetTagCategoriesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load languages: {ex.Message}";
        }
    }

    private async Task SavePhrase()
    {
        if (string.IsNullOrWhiteSpace(phraseText))
        {
            errorMessage = "Phrase text is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(selectedLanguage))
        {
            errorMessage = "Language is required.";
            return;
        }

        isSaving = true;
        errorMessage = string.Empty;

        try
        {
            var phrase = await PhraseService.CreatePhraseAsync(
                phraseText.Trim(),
                selectedLanguage,
                string.IsNullOrWhiteSpace(phraseNote) ? null : phraseNote.Trim());
            await PhraseService.UpdatePhraseTagAsync(phrase.PhraseId, selectedTags.Select(t => t.TagId).ToArray());

            await NavigateToPrevious();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to save phrase: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void SetTempStorage()
    {
        TempStorage.Push("phrase_add", new PhraseData
        {
            SelectedLanguage = selectedLanguage,
            PhraseText = phraseText,
            PhraseNote = phraseNote,
            SelectedTags = selectedTags,
        });
    }

    private class PhraseData
    {
        internal string? SelectedLanguage { get; set; }
        internal string? PhraseText { get; set; }
        internal string? PhraseNote { get; set; }
        internal List<Tag>? SelectedTags { get; set; }
    }
}