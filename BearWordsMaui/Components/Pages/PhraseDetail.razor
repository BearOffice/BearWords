@page "/phrase/{PhraseId}"
@inject NavigationManager Navigation
@inject PhraseService PhraseService

<ErrorAlert Message="@errorMessage" />

@if (isLoading)
{
    <div class="card">
        <div class="card-body">
            <Placeholder />
        </div>
    </div>
}
else if (phrase is null)
{
    <div class="text-center text-muted">
        <p>No phrase found.</p>
    </div>
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-start mb-3">
                <div>
                    <h2 class="card-title">@phrase.PhraseText</h2>
                    <span class="badge bg-info">@phrase.PhraseLanguage</span>
                </div>
                <div class="d-flex flex-column flex-sm-row justify-content-center align-items-end align-items-sm-center gap-2 ms-2">
                    <button class="btn btn-primary" @onclick="NavToPhraseEdit">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="btn btn-danger" @onclick="DeletePhrase">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </div>
            @if (phrase!.PhraseTags.Count != 0)
            {
                <div class="mb-3" style="overflow: hidden;">
                    <h5>Tags</h5>
                    @foreach (var phraseTag in phrase!.PhraseTags.OrderBy(pt => pt.Tag.TagName))
                    {
                        <span class="badge bg-secondary tag-badge me-2"
                              @onclick="() => {
                              selectedTag = phraseTag.Tag;
                              showTagModal = true;
                          }">
                          @phraseTag.Tag.TagName
                      </span>
                    }
                </div>
            }
            <div>
            <h5>Note</h5>
            <div class="card">
                <div class="card-body">
                    <p class="mb-0" style="white-space: pre-wrap;">
                        @if (!string.IsNullOrEmpty(phrase.Note))
                        {
                            @phrase.Note
                        }
                        else
                        {
                            <em class="text-muted">The note is empty.</em>
                        }
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>
}

<!-- Confirmation Modal -->
<ConfirmationModal Visible="showDeleteModal"
                   Title="Delete Phrase"
                   Body="Are you sure you want to delete this phrase?"
                   BtnType="ConfirmationModal.ModalButtonType.Danger"
                   OnConfirm="ConfirmDelete"
                   OnCancel="CancelDelete" />

<TagDetailModal Visible="@showTagModal"
                Tag="@selectedTag"
                OnClose="() => { showTagModal = false; selectedTag = null; }" />

@code {
    [Parameter] public string PhraseId { get; set; } = string.Empty;

    private Phrase? phrase;
    private bool isLoading = true;
    private bool showDeleteModal = false;
    private bool showTagModal;
    private Tag? selectedTag;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadPhrase();
    }

    private async Task LoadPhrase()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            phrase = await PhraseService.GetPhraseByIdAsync(PhraseId);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load phrase: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void DeletePhrase()
    {
        showDeleteModal = true;
    }

    private async Task ConfirmDelete()
    {
        showDeleteModal = false;
        errorMessage = string.Empty;

        try
        {
            await PhraseService.DeletePhraseAsync(PhraseId);
            Navigation.NavigateTo("/phrases");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete phrase: {ex.Message}";
        }
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
    }

    private void NavToPhraseEdit()
    {
        Navigation.NavigateTo($"/phrase/edit/{PhraseId}");
    }
}