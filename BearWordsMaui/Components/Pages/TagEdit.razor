@page "/tag/edit/{TagId}"
@inherits BasePageComponent
@inject TagService TagService
@inject ITempStorageService TempStorage

<h2 class="mb-4">Edit Tag</h2>

<ErrorAlert Message="@errorMessage" />

@if (isLoading)
{
    <Placeholder />
}
else if (tag is null || tagCategories is null)
{
    <div class="text-center text-muted">
        <p>Tag not found.</p>
    </div>
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="mb-2">
                <label for="tag-name" class="form-label">Tag Name</label>
                <input type="text" class="form-control" id="tag-name" @bind="tagName">
            </div>

            <div class="mb-2">
                <label for="tag-details" class="form-label">Details</label>
                <textarea class="form-control" id="tag-details" rows="6" @bind="description"></textarea>
            </div>

            <div class="mb-3">
                <label for="tag-category" class="form-label">Tag Category</label>
                <div class="d-flex gap-2">
                    <select class="form-select" id="tag-category" @bind="selectedTagCategoryId">
                        @foreach (var category in tagCategories)
                        {
                            <option value="@category.TagCategoryId">@category.CategoryName</option>
                        }
                    </select>
                    <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="NavToTagCatAdd">
                        <i class="bi bi-plus-circle"></i>
                    </button>
                </div>
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary" disabled="@isSaving" @onclick="OnSubmit">
                    <i class="bi bi-save"></i> Save
                </button>
                <button type="button" class="btn btn-secondary" @onclick="NavigateToPrevious">
                    <i class="bi bi-x-circle"></i> Discard
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string TagId { get; set; } = null!;

    private Tag? tag;
    private TagCategory[]? tagCategories;
    private string tagName = string.Empty;
    private string? description;
    private string selectedTagCategoryId = string.Empty;
    private bool isLoading = true;
    private bool isSaving = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var data = TempStorage.Pop<TagData>("tag_edit");
        await LoadData(data);
    }

    private async Task LoadData(TagData? tempData = null)
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            tag = await TagService.GetTagByIdAsync(TagId);
            tagCategories = await TagService.GetTagCategoriesAsync();

            if (tag is not null)
            {
                if (tempData is not null)
                {
                    tagName = tempData.TagName!;
                    description = tempData.Desc;
                    selectedTagCategoryId = tempData.SelectedTagCategoryId!;
                }
                else
                {
                    tagName = tag.TagName;
                    description = tag.Description;
                    selectedTagCategoryId = tag.TagCategoryId;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load tag: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnSubmit()
    {
        if (string.IsNullOrWhiteSpace(tagName))
        {
            errorMessage = "Tag name is required.";
            return;
        }

        isSaving = true;
        errorMessage = string.Empty;

        try
        {
            await TagService.UpdateTagAsync(TagId, tagName, description, selectedTagCategoryId);
            await NavigateToPrevious();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to update tag: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void NavToTagCatAdd()
    {
        TempStorage.Push("tag_edit", new TagData { TagName = tagName, Desc = description });
        Navigation.NavigateTo("/tag-category/add");
    }

    private class TagData
    {
        internal string? TagName { get; set; }
        internal string? Desc { get; set; }
        internal string? SelectedTagCategoryId { get; set; }
    }
}